# Nginx CDN Configuration for Atlas Platform Static Assets
worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format cdn '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log cdn;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml;

    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Cache settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=assets:100m max_size=1g inactive=60d use_temp_path=off;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=assets:10m rate=10r/s;

    server {
        listen 80;
        server_name cdn.atlas.local;
        
        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # CORS headers for cross-origin requests
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control";

        # Handle preflight requests
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # Static assets with long-term caching
        location /static/ {
            alias /var/www/html/static/;
            
            # Cache for 1 year
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Enable compression
            gzip_static on;
            
            # Rate limiting
            limit_req zone=assets burst=20 nodelay;
            
            # Try to serve request as file, then 404
            try_files $uri $uri/ =404;
        }

        # Images with optimization
        location ~* \.(jpg|jpeg|png|gif|webp|avif|svg)$ {
            root /var/www/html/static;
            
            # Cache for 1 year
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Enable compression for SVG
            location ~* \.svg$ {
                gzip_static on;
                add_header Content-Type image/svg+xml;
            }
            
            # Image optimization proxy
            location ~* \.(jpg|jpeg|png|gif|webp|avif)$ {
                # Proxy to image optimization service if query params present
                if ($args) {
                    proxy_pass http://image-optimizer:9000;
                }
                
                try_files $uri $uri/ =404;
            }
        }

        # Fonts with long-term caching
        location ~* \.(woff|woff2|ttf|otf|eot)$ {
            root /var/www/html/static;
            
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
            
            try_files $uri $uri/ =404;
        }

        # CSS and JS files
        location ~* \.(css|js)$ {
            root /var/www/html/static;
            
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Enable compression
            gzip_static on;
            
            try_files $uri $uri/ =404;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Metrics endpoint for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Default fallback
        location / {
            return 404;
        }
    }
}